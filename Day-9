#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Solution {
public:
    vector<int> search(string& pat, string& txt) {
        int n = txt.size();
        int m = pat.size();
        vector<int> lps(m); // Longest Prefix Suffix array
        vector<int> res;    // To store results (indices)

        // Compute the LPS array
        computeLPSArray(pat, lps);

        int i = 0, j = 0; // i for txt, j for pat
        while (i < n) {
            if (txt[i] == pat[j]) {
                i++;
                j++;
            }
            if (j == m) {
                // Found a match, store the starting index (0-based)
                res.push_back(i - j);
                j = lps[j - 1]; // Continue searching for the next occurrence
            } else if (i < n && txt[i] != pat[j]) {
                // Mismatch after j matches
                if (j > 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }
        return res;
    }

private:
    void computeLPSArray(string& pat, vector<int>& lps) {
        int m = pat.size();
        int len = 0;       // Length of the previous longest prefix suffix
        lps[0] = 0;        // LPS[0] is always 0
        int i = 1;         // Start computing from the second character

        while (i < m) {
            if (pat[i] == pat[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
               
